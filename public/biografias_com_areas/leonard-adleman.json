{
  "nome_completo": "Leonard Adleman",
  "nome_curto": "Leonard Adleman",
  "ano_nascimento": "1945",
  "ano_morte": "",
  "link": "https://mathshistory.st-andrews.ac.uk/Biographies/Adleman/",
  "lugar_nascimento": "San Francisco, California, USA",
  "lugar_morte": null,
  "biografia": "Leonard Adleman\n's father was an appliance salesman, his mother a bank teller. As a young boy growing up in San Francisco, Adleman had little ambition, far less of becoming a mathematician. By his own admission, he was\n[\n1\n]\n\"\nincredibly naive and immature\n\". However, it was his high school English teacher who made him realize the beauty of ideas through a reading of Hamlet. It was at the suggestion of this teacher who had opened his eyes \"\nto the fact that one could see things more deeply than the purely superficial\n\" that Adleman enrolled at the University of California at Berkeley. Still hesitant and undecided, he first declared to be a chemist\n(\ninspired by years of watching Mr.Wizard on television\n)\n, then a doctor\n(\ninspired by his Kappa Nu fraternity brothers\n)\nbefore settling on a mathematics major.\n[\n1\n]\nI had gone through a zillion things and finally the only thing that was left where I could get out in a reasonable time was mathematics.\nIt took him five years to finally graduate in\n1968\nwhen he took a job as a computer programmer at the Bank of America. Soon after, he applied to medical school where he was accepted but he changed his mind and did not enroll. He decided instead to be a physicist and began taking classes at the San Francisco State College while working at the bank. Once again he lost interest.\nI didn't like doing experiments, I liked thinking about things.\nAdleman eventually returned to Berkeley for pursuing a PhD in computer science. He had two motivations, the first being practical:-\nI thought that getting a PhD in computer science would at least further my career.\nThe second was more romantic.\nMartin Gardner\nhad written an article on\nGÃ¶del\n's theorem in\nScientific American\nwhich overwhelmed Adleman with its deep philosophical implications:-\nI thought 'Wow. This is so neat.' There were several things I found neat - black holes, general relativity. I thought for once in my life, I want to really understand one of these deep results.\nAdleman decided to join graduate school and come away with an understanding of\nGÃ¶del\n's theorem at a level beyond the superficial. However, while in graduate school, something else happened to him -- he finally understood the true nature and compelling beauty of mathematics. He discovered that it was \"\n... less related to accounting than it is to philosophy\n.\"\nPeople think of mathematics as some kind of practical art, ... the point when you become a mathematician is where you somehow see through this and see the beauty and power of mathematics.\nIn\n1976\n, Adleman completed his thesis \"\nNumber Theoretic Aspects of Computational Complexities\n\", received his PhD, and immediately secured a job as an assistant professor of mathematics at MIT.\n(\nHis father advised him to stay with the Bank of America where atleast they had a good retirement plan\n)\n. One of Adleman's colleagues at MIT was Ronald Rivest who had his office next door. Rivest had been gripped by an article in\nThe IEEE Transactions on Information Theory\nwritten by Martin Hellman, a computer scientist at Stanford, and his student Whitfield Diffie\n(\nsee\n[\n2\n]\n)\n. In it, they had described an idea for a new kind of encryption system. It was based on introducing new secret \"keys\" -- mathematical formulas for scrambling and unscrambling messages. Up until then, anyone in possession of an encrypting key could also decrypt by simply reversing the encryption instructions. What Hellman and Diffie proposed was quite revolutionary -- use one-way functions or mathematical formulas that are easy to compute in one direction but impossible to do in the reverse unless one knew how they were constructed in the first place. The encryption key could be made public so that anyone could send an encoded message. But only someone having the actual construction of the key would have the decryption key and thus be able to decode it.\nRivest announced that such a one-way function would be found which would lead to the creation of a public key cryptosystem. The idea itself was manifestly workable but finding a truly one-way function seemed a formidable task. Rivest had an equally enthusiastic supporter in one of his colleagues -- Adi Shamir. Adleman however was less than excited -- he thought the idea was quite impractical and unworthy of pursuing. Soon however, Rivest and Shamir were inventing coding systems and Adleman agreed to test each of the systems by trying to break it. The duo came up with\n42\ndifferent coding systems and each time Adleman was able to break it. On the\n43\nrd\nattempt, based on a difficult factoring problem, Adleman confessed that the code was really unbreakable because of the mathematics involved and could presumably take centuries of computation to factor. Rivest stayed up all night, preparing the manuscript describing the code before he handed it to Adleman. He had listed the paper's authors in alphabetical order - Adleman, Rivest, Shamir. Adleman demurred:-\nI told Ron, 'Take my name off the paper. It's your work'.\nBut Rivest insisted and eventually prevailed upon him.\nI thought, 'Well, it's going to be the least important paper I've ever been on, but in a few years I will need so many lines on my vita to get tenure, ...  on the other hand, I did do a substantial amount of intellectual work breaking the codes\n1\nthrough\n42\n. So the reasonable thing to do is be the third author'.\nMartin Gardner\nwrote about the code, now called RSA after the persons involved, in his column\n(\nsee\n[\n3\n]\n)\nand much to Adleman's astonishment, their fame and that of the code spread rapidly. A barrage of letters poured in and the National Security Agency\n(\nNSA\n)\n, hitherto the only place where encryption was studied, expressed fears that the publication of seemingly unbreakable codes like RSA might potentially jeopardise national security!\nRivest, Shamir and Adleman assigned the patent for their code to MIT and in\n1983\nformed a company, RSA Data Security Inc. of Redwood City, California, to make RSA computer chips. Adleman was made president, Rivest chairman of the board and Shamir the treasurer. In\n1996\n, the company was sold for $\n200\nmillion.\nMIT provided Adleman with an intellectually stimulating atmosphere but he yearned for California where he wanted to settle down and have a family. Accordingly, he took up a job at the University of Southern California in Los Angeles\n(\nwhere he is presently the Henri Salvatori Professor of Computer Science and Professor of Molecular Biology\n)\nin\n1980\n. Three years later, he met his future wife Lori Bruce at a singles dance. It was love at first sight and the couple got married six weeks later.\nIn that same year, Adleman, along with R S Rumely and C Pomerance, published a paper describing a 'nearly polynomial time' deterministic algorithm for the problem of distinguishing prime numbers from composite ones. It was the first ever result in theoretical computer science to be published in\nAnnals of Mathematics\n(\nsee\n[\n4\n]\n)\n.\nThe year also witnessed a landmark development in computer science. Fred Cohen, a graduate student at USC, put forth a new idea regarding \"\na program that can 'infect' other programs by modifying them to include a possibly modified version of itself\n\". Adleman, who was Cohen's supervisor, was immediately convinced that the idea would work the moment he learned about it. He proposed the name 'virus' for the program to Cohen who eventually published his first virus paper in\n1984\nand his PhD dissertation on the same topic in\n1986\n.\nA key turning point in Adleman's life came during the early\n90\n's when he directed his enthusiasm towards the field of immunology. One of the reasons for his growing interest in it was that unsolved problems in immunology \"\nhad the kind of beauty mathematicians look for\n\"\n[\n5\n]\n. Adleman was soon preoccupied with the study of white blood cells called T lymphocytes whose steady decline in AIDS patients leave them vulnerable to lethal infections. The T cells are primarily of two types - CD\n4\nand CD\n8\n. There are about\n800\nCD\n4\nT cells in each cubic millimeter of blood plasma in healthy and newly infected persons. This number however, declines gradually during the decade-long latency period associated with AIDS. Typically, after CD\n4\ncell count drops below\n200\n, infections characteristic of AIDS set in. However, \"\nlosing a T cell is not like losing an arm or a leg\n\"\n[\n5\n]\n. The human body, even that of an HIV-infected person, can replenish the T cell count by making new ones. It was quite mysterious why CD\n4\nT cell population shrank in HIV-infected patients.\nAdleman and others suggested that the problem lay in the homeostatic mechanism which monitors the levels of T cells - it does not distinguish between CD\n4\nand CD\n8\ncells. Thus every time it detects the loss of T cells, the homeostatic mechanism generates both CD\n4\nand CD\n8\ncells to restore the total T cell-count. However, addition of CD\n8\ncells effectively suppresses the production of CD\n4\ncells and consequently HIV continues attacking CD\n4\n, thus lowering its count. As Adleman put it\n[\n5\n]\n:-\nThe homeostatic mechanism ... is blind.\nAdleman and David Wofsy of the University of California at San Francisco described their test of the hypothesis in the February\n1993\nissue of\nJournal of Acquired Immune Deficiency Syndromes\n(\nJAIDS\n)(\nsee\n[\n6\n]\n)\n. Unfortunately, the AIDS research community's responses to Adleman's ideas were less than encouraging. Undeterred, Adleman decided to acquire a deeper understanding of the biology of HIV in order to be a more persuasive advocate. He entered the molecular biology lab at USC and began to learn the methods of modern biology under the guidance of Nickolas Chelyapov\n(\nnow chief scientist in Adleman's own laboratory\n)\n.\nIt was a period of intense learning for Adleman whose own earlier views on biology was undergoing a significant transformation. He explains why\n[\n7\n]\n:-\nBiology was now the study of information stored in DNA -- strings of four letters: A, T, G and C for the bases adenine, thymine, guanine and cytosine -- and of the transformations that information undergoes in the cell. There was mathematics here!\nHe began reading the classic text\nThe Molecular Biology of the Gene\n, co-authored by James D. Watson\n(\nsee\n[\n13\n]\n)\nof Watson-Crick fame. Adleman vividly recounts the time he studied the description of a rather special enzyme\n[\n7\n]\n:-\nLate one evening, while lying in bed reading Watson's text, I came to a description of DNA polymerase. This is the king of enzymes - the maker of life. Under appropriate conditions, given a strand of DNA, DNA polymerase produces a second \"Watson-Crick\" complementary strand, in which every C is replaced by a G, every G by a C, every A by a T and every T by an A. For example, given a molecule with the sequence CATGTC, DNA polymerase will produce a new molecule with the sequence GTACAG. The polymerase enables DNA to reproduce, which in turn allows cells to reproduce and ultimately allows you to reproduce. For a strict reductionist, the replication of DNA by DNA polymerase is what life is all about.\nHe continues:-\nDNA polymerase is an amazing little nanomachine, a single molecule that \"hops\" onto a strand of DNA and slides along it, \"reading\" each base it passes and \"writing\" its complement onto a new, growing DNA strand.\nIt was Adleman's moment of epiphany:-\nWhile lying there admiring this amazing enzyme, I was struck by its similarity to something described in\n1936\nby\nAlan Turing\n, the famous British mathematician.\nIndeed, Adleman was thinking about the \"Turing machine\".\nOne version of his machine consisted of a pair of tapes and a mechanism called a finite control, which moved along the \"input\" tape reading data while simultaneously moving along the \"output\" tape reading and writing other data. The finite control was programmable with very simple instructions, and one could easily write a program that would read a string of A, T, C and G on the input tape and write the Watson-Crick complementary string on the output tape. The similarities with DNA polymerase could hardly have been more obvious.\nEven more was true:-\nBut there was one important piece of information that made this similarity truly striking: Turing's toy computer had turned out to be universal - simple as it was, it could be programmed to compute anything that was computable at all.\n(\nThis notion is essentially the content of the well-known \"\nChurch\n's thesis\".\n)\nIn other words, one could program a Turing machine to produce Watson-Crick complementary strings, factor numbers, play chess and so on.\nAdleman could hardly contain his excitement:-\nThis realization caused me to sit up in bed and remark to my wife, Lori, \"Jeez, these things could compute.\" I did not sleep the rest of the night, trying to figure out a way to get DNA to solve problems.\nHe readily decided to make a DNA computer similar to a\nTuring\nmachine with an enzyme replacing the finite control. A decade earlier, IBM researchers Charles H. Bennet and Rolf Landauer had suggested essentially similar ideas\n(\nsee\n[\n8\n]\n)\nbut there was uncertainty regarding the existence of enzymes which not only produced Watson-Crick complements but were able to perform other mathematical functions as well. Adleman wanted his DNA computer to perform something at least as interesting as playing chess. To this end, he began learning the essential tools of DNA chemistry like polymerases, ligases, gel electrophoresis, DNA synthesis etc. The fact that commercial DNA, tailor-made to specific requirements, was readily available was more than helpful for his purpose.\nIt is now possible to write a DNA sequence on a piece of paper, send it to a commercial synthesis facility and in a few days receive a test tube containing approximately molecules of DNA, all\n(\nor atleast most\n)\nof which have the described sequence. ... The molecules are delivered dry in a small tube and appear as a small, white, amorphous lump.\nTheoretically, only two things were needed to build a computer capable of computing anything computable - a method by which information was stored and simple operations which acted on it. DNA itself was a storehouse for information\n(\nit contains the 'blueprint of life'!\n)\nwhile enzymes like polymerases had been used to operate on this information. Adleman knew he had enough to build a universal computer.\nThe very next thing he had to do was to select a problem which his DNA computer would be able to solve. Adleman decided upon the Hamiltonian Path Problem.\n... given a graph with directed edges and a specified start vertex and end vertex, one says there is a Hamiltonian path if and only if there is a path that starts at the start vertex, ends at the end vertex and passes through each remaining vertex exactly once. The Hamiltonian Path Problem is to decide for any given graph with specified start and end vertices whether a Hamiltonian path exists or not.\nAlthough the Hamiltonian Path Problem has been studied extensively, an efficient algorithm to solve it is yet to emerge. It was shown during the early\n1970\n's that no efficient algorithm for the problem is at all possible\n(\nproving it is still an open problem!\n)\n. In fact, it belongs to a larger class of problems known as \"NP-complete\" problems. However, there are algorithms such as the following which work nevertheless:\nGiven a directed graph\nG\nG\nG\nwith\nn\nn\nn\nvertices, having start vertex\nu\nu\nu\nand end vertex\nv\nv\nv\n,\nGenerate a set of random paths throughout the graph.\nRemove any path that does not begin with\nu\nu\nu\nand end with\nv\nv\nv\n.\nRemove any path that does not enter exactly\nn\nn\nn\nvertices.\nRemove any path that does not passes through each vertex at least once.\nIf the set is non-empty, say \"Yes\"; otherwise, say \"No\".\nThough not an efficient one, this algorithm gives reasonably correct results provided paths are generated randomly enough and the resulting sets are large enough. It was precisely this algorithm which Adleman used in his first DNA computation. For his Hamiltonian Path Problem, he chose the following directed graph:\nIn this graph, the start and end vertices for the Hamiltonian path are respectively\n0\nand\n6\n. Adleman first assigned a random DNA sequence to each vertex and edge in the graph\n(\nthe sequences are known as oligonucleotides\n)\n. Because each DNA sequence has its Watson-Crick complement, each vertex is associated with its complement sequence. Once the encodings were set in place, the complementary DNA sequences for the vertices and the sequences for the edges were synthesized. The remaining procedures are best described by Adleman himself:-\nI took a pinch\n(\nabout\n1\n0\n14\n10^{14}\n1\n0\n1\n4\nmolecules\n)\nof each of the different sequences and put them into a common test tube. To begin the computation, I simply added water - plus ligase, salt and a few other ingredients to approximate the conditions inside a cell. Altogether only about one fiftieth of a teaspoon of solution was used. Within about one second, I had the answer to the Hamiltonian Path Problem in my hand.\nAdleman had to then perform a rather tedious experiment by which he had to weed out about a\n100\ntrillion molecules that encoded non-Hamiltonian paths. The fact that he implemented the algorithm described above meant that any DNA remaining in the test tube after every preceding steps were carried out should necessarily encode the desired Hamiltonian path. In the end, it took Adleman seven days in the molecular biology lab to perform the world's first DNA computation.\nAdleman reported his brilliant discovery in the November\n1994\nissue of\nScience\n(\nsee\n[\n9\n]\n)\nand he is now rightly hailed as the 'father of DNA computation'. One of the most exciting fields in contemporary scientific research, molecular computation has witnessed some remarkable breakthroughs in the years following Adleman's experiment. In\n1995\n, Richard J. Lipton at Princeton University proposed\n(\nsee\n[\n10\n]\n)\na DNA solution to another famous 'NP-complete' problem - the so-called \"satisfaction\" problem\n(\nSAT\n)\n. In\n2002\n, a research team led by Ehud Shapiro at the Weizmann Institute of Science in Rehovet, Israel devised a molecular computing machine composed of enzymes and DNA molecules which could perform\n330\ntrillion operations per second, more than\n100\n,\n000\ntimes the speed of the fastest PC. Within months, the same team improved on their previous model with one in which the DNA input is also the source of fuel for the machine\n(\nsee\n[\n12\n]\n)\n. The Guinness Book of Records recognized the computer as '\nthe smallest biological computing device\n'\n[\n11\n]\never constructed.\nSuch DNA computing devices have revolutionary implications in the pharmaceutical and biomedical fields. Scientists foresee a future where tiny DNA computers would be able to monitor our well-being and release the right drug to repair damaged tissues. Says Shapiro\n[\n11\n]\n:-\nAutonomous bio-molecular computers may be able to work as 'doctors in a cell', operating inside living cells and sensing anomalies in the host ... Consulting their programmed medical knowledge, the computers could respond to anomalies by synthesizing and releasing drugs.\nDavid Hawksett, the science judge at the Guinness World Records, puts it aptly\n[\n11\n]\n:-\nThis is an area of research that leaves the science fiction writers struggling to keep up.\nThis 'doctor-in-a-cell' vision for molecular computation is only one of many others being vigorously pursued by scientists who are now the torchbearers of the new 'molecular science' which attempts to penetrate deep into the hidden mysteries of life. It is indeed remarkable that the marriage of the seemingly disparate yet equally fecund fields of biology and mathematics has fostered such an enterprise. No less inspirational, in this age of fierce specialization, is the fact that it was a mathematician who started it all. Perhaps someday we might vindicate Adleman's vision\n[\n7\n]\n:-\nIn the past half-century, biology and computer science have blossomed, and there can be little doubt that they will be central to our scientific and economic progress in the new millenium. But biology and computer science - life and computation - are related. I am confident that at their interface great discoveries await those who seek them.",
  "math_areas": [
    "Analysis",
    "Logic"
  ]
}